FPGA Code
module Morse_Code(
	input [7:0] D, //input of switch
	input mclk, //input of 50MHz clock on FPGA board
	output reg LED, //output LED
	output reg TxD //output bits to computer
    );

	reg[3:0] state;
	reg start_in = 0; //internal start signal
	reg clk19200; //19200Hz clock getting input from switch
	reg clk1; //clock for sending input to the computer
	reg[100:0] counter;
	reg[100:0] counter1;
	reg[10:0] counter2;
	reg done = 0;

	always@(posedge mclk) //mclk 50MHz; 1mHz = 10^6 Hz
		if(counter == 1302) //((1/19200)/2)/(1/50000000)
			begin
			counter = 0;
			clk19200 = ~clk19200;
			end
		else
			counter = counter + 1;
			
	always@(posedge mclk)
		begin
		if(counter1 == 5000000)
			begin
			counter1 = 0;
			clk1 = ~clk1;
			start_in = ~start_in;
			end
		else
			counter1 = counter1 + 1;
		end
	
	always@(posedge clk1)
		begin
		if(counter2 == 4)
			begin
			counter2 = 0;
			LED = ~LED;
			end
		else
			counter2 = counter2 + 1;
		end
	
	always@(posedge clk19200)
		if(start_in == 0)
			begin
			TxD <= 1;
			done <= 0;
			state <= 0;
			end
		else if(state == 0 && done == 0)
			begin
			TxD <= 0;
			state <= 1;
			end
		else if(state == 1)
			begin
			TxD <= D[0];
			state <= 2;
			end
		else if(state == 2)
			begin
			TxD <= D[1];
			state <= 3;
			end
		else if(state == 3)
			begin
			TxD <= D[2];
			state <= 4;
			end
		else if(state == 4)
			begin
			TxD <= D[3];
			state <= 5;
			end
		else if(state == 5)
			begin
			TxD <= D[4];
			state <= 6;
			end
		else if(state == 6)
			begin
			TxD <= D[5];
			state <= 7;
			end
		else if(state == 7)
			begin
			TxD <= D[6];
			state <= 8;
			end
		else if(state == 8)
			begin
			TxD <= D[7];
			state <= 9;
			end
		else if(state == 9)
			begin
			TxD <= 1;
			done <= 1;
			state <= 0;
			end
endmodule


Python Code
import serial

a=serial.Serial('COM9',19200)

def find_char(curr_char, LR):
    if(curr_char == '$'):
        return '/'
    if(curr_char == '/'):    
        if(LR == 1):
            return 'E'
        else:
            return 'T'
    if(curr_char == 'E'):    
        if(LR == 1):
            return 'I'
        else:
            return 'A'
    if(curr_char == 'I'):    
        if(LR == 1):
            return 'S'
        else:
            return 'U'
    if(curr_char == 'A'):    
        if(LR == 1):
            return 'R'
        else:
            return 'W'
    if(curr_char == 'S'):    
        if(LR == 1):
            return 'H'
        else:
            return 'V'
    if(curr_char == 'U'):    
        if(LR == 1):
            return 'F'
        else:
            return '^'
    if(curr_char == 'R'):    
        if(LR == 1):
            return 'L'
        else:
            return 'A'
    if(curr_char == 'W'):    
        if(LR == 1):
            return 'P'
        else:
            return 'J'
    if(curr_char == 'H'):    
        if(LR == 1):
            return '5'
        else:
            return '4'
    if(curr_char == 'V'):    
        if(LR == 1):
            return '$'
        else:
            return '3'
    if(curr_char == 'F'):    
        if(LR == 1):
            return '$'
        else:
            return '$'
    if(curr_char == '^'):
        if(LR == 1):
            return '$'
        else:
            return '2'
    if(curr_char == 'L'):    
        if(LR == 1):
            return '$'
        else:
            return '$'
    if(curr_char == 'A'):    
        if(LR == 1):
            return '$'
        else:
            return '$'
    if(curr_char == 'P'):    
        if(LR == 1):
            return '$'
        else:
            return '$'
    if(curr_char == 'J'):    
        if(LR == 1):
            return '$'
        else:
            return '1'
    if(curr_char == 'T'):
        if(LR==1):
            return 'N'
        else:
            return 'M'
    if(curr_char == 'N'):
        if(LR==1):
            return 'D'
        else:
            return 'K'
    if(curr_char == 'D'):
        if(LR==1):
            return 'B'
        else:
            return 'X'
    if(curr_char == 'B'):
        if(LR==1):
            return '6'
        else:
            return '$'
    if(curr_char == '6'):
        if(LR==1):
            return '$'
        else:
            return '$'
    if(curr_char == 'X'):
        if(LR==1):
            return '$'
        else:
            return '$'
    if(curr_char == 'K'):
        if(LR==1):
            return 'C'
        else:
            return 'Y'
    if(curr_char == 'C'):
        if(LR==1):
            return '$'
        else:
            return '$'
    if(curr_char == 'Y'):
        if(LR==1):
            return '$'
        else:
            return '$'
    if(curr_char == 'M'):
        if(LR==1):
            return 'G'
        else:
            return 'O'
    if(curr_char == 'G'):
        if(LR==1):
            return 'Z'
        else:
            return 'Q'
    if(curr_char == 'Z'):
        if(LR==1):
            return '7'
        else:
            return '$'
    if(curr_char == 'Q'):
        if(LR==1):
            return '$'
        else:
            return '$'
    if(curr_char == 'O'):
        if(LR==1):
            return '('
        else:
            return 'ch'
    if(curr_char == '('):
        if(LR==1):
            return '8'
        else:
            return '$'
    if(curr_char == '8'):
        if(LR==1):
            return '$'
        else:
            return '$'
    if(curr_char == 'ch'):
        if(LR==1):
            return '9'
        else:
            return '0'

count_zero = 0
count_one = 0
last_bit = 0
curr_char = '/'
terminate = 0
b = 8

while terminate == 0:
    bit = a.read()[0]
    #print(bit,end='')
    if bit==0:
        count_zero = count_zero + 1
        if count_zero == 5*b:
                #end program
                terminate = 1
                print('')
        elif count_zero == 2*b:
                #end word, print " "
                print(' ', end='')
                curr_char = '/'
        elif count_zero == b:
                #end char, print the char
                print(curr_char, end='')
                curr_char = '/'
    else:
        count_one = count_one + 1
    if last_bit != bit:
        if last_bit == 1:
            #1 -> 0
            if count_one < b:
                #. recieved, go to the left
                curr_char = find_char(curr_char, 1)
            else:
                #- recieved, go to the right
                curr_char = find_char(curr_char, 0)
            count_one = 0
        else:
            #0 -> 1
            count_zero = 0
    last_bit = bit
    
a.close()



